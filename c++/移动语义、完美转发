#2024/3/8
移动语义
  c++11后
  对象赋值时，避免资源的重新分配
  触发移动构造以及移动拷贝构造
    A a;
    A b(std::move(a));
  stl应用

完美转发
  函数模板可以将自己的参数完美地转发给内部调用的其他参数
  完美是指不仅能准确地转发参数的值，还能保证转发的参数的左右值属性不变
  借用万能引用，通过引用的方式接受左右属性的值
    void func(int &n){
      count << "lvalue=" << n << endl;
    }
    void func(int &&n){
      cout << "rvalue=" << n << endl;
    }

    template<typename T>
    void revoke(T &&t){
      func(forward<T>(t)){
    }
  引用折叠规则-----------------------------------------------------保证准确转发参数的值
    参数为左值或左值引用，T&&将转化为int&    revoke(static_cast<int &> n);  int & && t-->int & t
    参数为右值或右值引用，T&&将转化为int&&   revoke(static_cast<int &&> m);  int && && t-->int && t
      revoke(n) int && t-->int & t变为左值引用            只有这种情况右值和右值引用传进来是----↑
  std::forward<T>(v)------------------------------------------保证转发的参数的左右值属性不变
    T为左值引用，v将转化为T类型的左值
    T为右值引用，v将转化为T类型的右值
